{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red193\green101\blue28;\red64\green11\blue217;\red180\green36\blue25;
\red47\green180\blue29;\red200\green20\blue201;\red29\green226\blue223;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 package\cf0  main\
\
\cf3  \cf0 \
\cf2 import\cf0  (\
        \cf4 "bytes"\cf0 \
        \cf4 "encoding/json"\cf0 \
        \cf4 "fmt"\cf0 \
        \cf4 "strconv"\cf0 \
\
        \cf4 "github.com/hyperledger/fabric/core/chaincode/shim"\cf0 \
        sc \cf4 "github.com/hyperledger/fabric/protos/peer"\cf0 \
)\
\
\
\cf3 // AML based chaincode, made for the transferring between to peers\
// OBS: query the ID first before starting balance.\
//locking is final and irreversible\
 \cf0 \
\cf2 type\cf0  AML \cf2 struct\cf0  \{\
\}\
\
\cf3 // Define the AML structure, with 8 properties. Every person has a unique ID\
//\cf0 \
\cf2 type\cf0  Transfer \cf2 struct\cf0  \{\
        ObjectType   \cf5 string\cf0  \cf4 `json:\'94docType\'94` \cf0 \
        ID   \cf5 string\cf0  \cf4 `json:\'94id\'94`\cf0 \
        StartBalance  \cf5 uint64\cf0  \cf4 `json:\'94startbalance\'94`\cf0 \
        Volume \cf5 uint64\cf0  \cf4 `json:\'94volume\'94`\cf0 \
        Frequency  \cf5 uint64\cf0  \cf4 `json:\'94frequency\'94`\
\cf0         Country   \cf5 string\cf0  \cf4 `json:\'94country\'94`\cf0 \
        Previous  \cf5 uint64\cf0  \cf4 `json:\'94previous\'94`\cf0 \
        Senority \cf5 string\cf0  \cf4 `json:\'94senority\'94`\cf0 \
        EndBalance  \cf5 *bool\cf0  \cf4 `json:\'94endbalance\'94`\cf0 \
\}\
\
\cf3 /*\cf0 \
\cf3  * The Init method is used to initialize the function\cf0 \
\cf3  */in case multiple users in the organization is using the contract, this can be stopped\
\cf0 \
\cf2 func\cf0  (s *AML) Init(stub shim.ChaincodeStubInterface) sc.Response \{\
        \cf2 return\cf0  shim.Success(\cf2 nil\cf0 )\
\}\
\
\cf3  //Invoke is called every transfer on the chaincode \cf0 \
\cf3  //every transfer is either a \'93get\'94 or s \'93set\'94 on the request created by the init function.\cf0 \
\cf3  //\
\cf0 \
\cf2 func\cf0  (s *AML) Invoke(stub shim.ChaincodeStubInterface) sc.Response \{\
\
        \cf3 // Retrieve the functions and args from the request\
\cf0 \
        fnc, args := APIstub.GetFunctionAndParameters()\
\
        \cf2 if\cf0  fnc == \cf4 \'93CreateTransfer\'94\cf0  \{ \cf3 //creates the transfer\cf0 \
                \cf2 return\cf0  t.CreateTransfer(stub, args)\
        \} \cf2 else\cf0  \cf2 if\cf0  fnc == \cf4 \'93Amount\'94\cf0  \{ \cf3 //Amount to transfer\cf0 \
                \cf2 return\cf0  t.Amount(stub)\
        \} \cf2 else\cf0  \cf2 if\cf0  fnc == \cf4 \'93Transfer\'94\cf0  \{ \cf3 //transfer to the recipient\cf0 \
                \cf2 return\cf0  t.Transfer(stub)\
        \} \cf2 else\cf0  \cf2 if\cf0  fnc == \cf4 \'93queryBalance\'94\cf0  \{ \cf3 //information about the balance\cf0 \
                \cf2 return\cf0  t.queryBalance(stub, args)\
        \} \cf2 else\cf0  \cf2 if\cf0  fnc == \cf4 \'93AdjustBalance"\cf0  \{ \cf3 // New balance\cf0 \
                \cf2 return\cf0  t.AdjustBalance(stub)\
        \} \cf2 else\cf0  \cf2 if\cf0  fnc == \cf4 \'93TransferHistory\'94\cf0  \{ \cf3 //gets the history of the amounts of the transfers\cf0 \
                \cf2 return\cf0  t.TransferHistory(stub, args)\
        \} \cf2 else\cf0  \cf2 if\cf0  fnc == \cf4 \'93queryAllTransfers\'94\cf0  \{ \cf3 //gets the history of all transfers\cf0 \
                \cf2 return\cf0  t.queryAllTransfers(stub, args)\
        \} \cf2 else\cf0  \cf2 if\cf0  fnc == \cf4 \'93LockBalance\'94\cf0  \{ \cf3 //lock balance for any further changes\cf0 \
                \cf2 return\cf0  t.LockBalance(stub, args)\
        \}\
        pmt.Println(\'93invoke function is not found:\'94 + fnc)\
        \cf2 return\cf0  shim.Error(\cf4 "Invalid Smart Contract function name."\cf0 )\
\}\
\
\cf2 func\cf0  (s *AML) CreateTransfer(stub shim.ChaincodeStubInterface, args []\cf5 string\cf0 ) sc.Response \{\
        \cf4 var\cf0  err error\
\cf3 		//ID, Startbalance, seniority, country, previous, frequency\cf0 \
        \cf2 if\cf0  \cf2 len\cf0 (args) != \cf4 6\cf0  \{\
        fmt.Println(\'93AML: CreateTransfers <id>, <startbalance>, <senority>, <country>, <previous>, <frequency>\'94)\
                \cf2 return\cf0  shim.Error(\cf4 "Incorrect number of arguments. Expecting 5\'94\cf0 )\
        \}\
\
        fmt.Println(\'93AML: Creating transfer initiated \'97-\'94)\
\
        carAsBytes, _ := APIstub.GetState(args[\cf4 0\cf0 ])\
        \cf2 return\cf0  shim.Success(carAsBytes)\
\
        \cf2 if len(\cf0 args[0])<= 0 \{\
                \cf2 return\cf0  shim.Error(\'931st argument must be non-empty string\'94)\
\
        \cf2 if len(\cf0 args[1])<= 0 \{\
                \cf2 return\cf0  shim.Error(\'932nd argument must be non-empty string\'94)\
\
        \cf2 if len(\cf0 args[2])<= 0 \{\
                \cf2 return\cf0  shim.Error(\'933rd argument must be non-empty string\'94)\
\
        \cf2 if len(\cf0 args[3])<= 0 \{\
                \cf2 return\cf0  shim.Error(\'934th argument must be non-empty string\'94)\
\
        \cf2 if len(\cf0 args[5])<= 0 \{\
                \cf2 return\cf0  shim.Error(\'935th argument must be non-empty string\'94)\
\
        \cf2 if len(\cf0 args[5])<= 0 \{\
                \cf2 return\cf0  shim.Error(\'936th argument must be non-empty string\'94)\
\
\
\
        id := args[0]\
        country := args[2]\
        senority:= args[3]\
        startbalance, err := strconv.ParseUint( := args[1], 10, 64)\
        \cf2 if \cf0 err != nil \{ \
                \cf2 return\cf0  shim.Error(\'932nd argument must be a number\'94)\
\}\
        previous, err := strconv.ParseUint( := args[4], 10, 64)\
        \cf2 if \cf0 err != nil \{ \
                \cf2 return\cf0  shim.Error(\'934th argument must be a number\'94)\
\}\
        frequency, err := strconv.ParseUint( := args[5], 10, 64)\
        \cf2 if \cf0 err != nil \{ \
                \cf2 return\cf0  shim.Error(\'935th argument must be a number\'94)\
\}\
\
        tvalbytes, err := stub.Getstate(id)\
        \cf2 if\cf0  err != nil \{\
                \cf2 return\cf0  shim.Error(\'93failed to get the current state information + err.Error())\
        \cf2 else if \cf0 tvalbytes != nil \{\
        fmt.Println(\'93This transfer is invalid\'94 + id)\
                \cf2 return\cf0  shim.Error(\'93This transfer is invalid\'94 + id)\
\}\
        objectTybe := \'93transfer\'94\
        f := \cf2 new\cf0 (bool)\
        *f = \cf4 false\
\
\cf0         transfer :=&Transfer(objective, id, startbalance, \'93\'94, country, seniority, previous, frequency, f)\
\
        tvalbytes, err = json.Marshal(transfer)\
        \cf2 if \cf0 err != nil \{ \
                \cf2 return\cf0  shim.Error(err.Error())\
\
        fmt.Println(\'97- succes in creating the transfer)\
                \cf2 return\cf0  shim.Succes(nil)\
\
\
\
\
\cf2 func\cf0  (s *SmartContract) initLedger(APIstub shim.ChaincodeStubInterface) sc.Response \{\
        cars := []Car\{\
                Car\{Make: \cf4 "Toyota"\cf0 , Model: \cf4 "Prius"\cf0 , Colour: \cf4 "blue"\cf0 , Owner: \cf4 "Tomoko"\cf0 \},\
                Car\{Make: \cf4 "Ford"\cf0 , Model: \cf4 "Mustang"\cf0 , Colour: \cf4 "red"\cf0 , Owner: \cf4 "Brad"\cf0 \},\
                Car\{Make: \cf4 "Hyundai"\cf0 , Model: \cf4 "Tucson"\cf0 , Colour: \cf4 "green"\cf0 , Owner: \cf4 "Jin Soo"\cf0 \},\
                Car\{Make: \cf4 "Volkswagen"\cf0 , Model: \cf4 "Passat"\cf0 , Colour: \cf4 "yellow"\cf0 , Owner: \cf4 "Max"\cf0 \},\
                Car\{Make: \cf4 "Tesla"\cf0 , Model: \cf4 "S"\cf0 , Colour: \cf4 "black"\cf0 , Owner: \cf4 "Adriana"\cf0 \},\
                Car\{Make: \cf4 "Peugeot"\cf0 , Model: \cf4 "205"\cf0 , Colour: \cf4 "purple"\cf0 , Owner: \cf4 "Michel"\cf0 \},\
                Car\{Make: \cf4 "Chery"\cf0 , Model: \cf4 "S22L"\cf0 , Colour: \cf4 "white"\cf0 , Owner: \cf4 "Aarav"\cf0 \},\
                Car\{Make: \cf4 "Fiat"\cf0 , Model: \cf4 "Punto"\cf0 , Colour: \cf4 "violet"\cf0 , Owner: \cf4 "Pari"\cf0 \},\
                Car\{Make: \cf4 "Tata"\cf0 , Model: \cf4 "Nano"\cf0 , Colour: \cf4 "indigo"\cf0 , Owner: \cf4 "Valeria"\cf0 \},\
                Car\{Make: \cf4 "Holden"\cf0 , Model: \cf4 "Barina"\cf0 , Colour: \cf4 "brown"\cf0 , Owner: \cf4 "Shotaro"\cf0 \},\
        \}\
\
        i := \cf4 0\cf0 \
        \cf2 for\cf0  i < \cf2 len\cf0 (cars) \{\
                fmt.Println(\cf4 "i is "\cf0 , i)\
                carAsBytes, _ := json.Marshal(cars[i])\
                APIstub.PutState(\cf4 "CAR"\cf0 +strconv.Itoa(i), carAsBytes)\
                fmt.Println(\cf4 "Added"\cf0 , cars[i])\
                i = i + \cf4 1\cf0 \
        \}\
\
        \cf2 return\cf0  shim.Success(\cf2 nil\cf0 )\
\}\
\
\cf2 func\cf0  (s *SmartContract) createCar(APIstub shim.ChaincodeStubInterface, args []\cf5 string\cf0 ) sc.Response \{\
\
        \cf2 if\cf0  \cf2 len\cf0 (args) != \cf4 5\cf0  \{\
                \cf2 return\cf0  shim.Error(\cf4 "Incorrect number of arguments. Expecting 5"\cf0 )\
        \}\
\
        \cf2 var\cf0  car = Car\{Make: args[\cf4 1\cf0 ], Model: args[\cf4 2\cf0 ], Colour: args[\cf4 3\cf0 ], Owner: args[\cf4 4\cf0 ]\}\
\
        carAsBytes, _ := json.Marshal(car)\
        APIstub.PutState(args[\cf4 0\cf0 ], carAsBytes)\
\
        \cf2 return\cf0  shim.Success(\cf2 nil\cf0 )\
\}\
\
\cf2 func\cf0  (s *SmartContract) queryAllCars(APIstub shim.ChaincodeStubInterface) sc.Response \{\
\
        startKey := \cf4 "CAR0"\cf0 \
        endKey := \cf4 "CAR999"\cf0 \
\
        resultsIterator, err := APIstub.GetStateByRange(startKey, endKey)\
        \cf2 if\cf0  err != \cf2 nil\cf0  \{\
                \cf2 return\cf0  shim.Error(err.Error())\
        \}\
        \cf2 defer\cf0  resultsIterator.Close()\
\
        \cf3 // buffer is a JSON array containing QueryResults\cf0 \
        \cf2 var\cf0  buffer \cf5 bytes.Buffer\cf0 \
        buffer.WriteString(\cf4 "["\cf0 )\
\
        bArrayMemberAlreadyWritten := \cf2 false\cf0 \
        \cf2 for\cf0  resultsIterator.HasNext() \{\
                queryResponse, err := resultsIterator.Next()\
                \cf2 if\cf0  err != \cf2 nil\cf0  \{\
                        \cf2 return\cf0  shim.Error(err.Error())\
                \}\
   \cf3 // Add a comma before array members, suppress it for the first array member\cf0 \
                \cf2 if\cf0  bArrayMemberAlreadyWritten == \cf2 true\cf0  \{\
                        buffer.WriteString(\cf4 ","\cf0 )\
                \}\
                buffer.WriteString(\cf4 "\{\cf6 \\"\cf4 Key\cf6 \\"\cf4 :"\cf0 )\
                buffer.WriteString(\cf4 "\cf6 \\"\cf4 "\cf0 )\
                buffer.WriteString(queryResponse.Key)\
                buffer.WriteString(\cf4 "\cf6 \\"\cf4 "\cf0 )\
\
                buffer.WriteString(\cf4 ", \cf6 \\"\cf4 Record\cf6 \\"\cf4 :"\cf0 )\
                \cf3 // Record is a JSON object, so we write as-is\cf0 \
                buffer.WriteString(\cf5 string\cf0 (queryResponse.Value))\
                buffer.WriteString(\cf4 "\}"\cf0 )\
                bArrayMemberAlreadyWritten = \cf2 true\cf0 \
        \}\
        buffer.WriteString(\cf4 "]"\cf0 )\
\
        fmt.Printf(\cf4 "- queryAllCars:\cf6 \\n\cf4 %s\cf6 \\n\cf4 "\cf0 , buffer.String())\
\
        \cf2 return\cf0  shim.Success(buffer.Bytes())\
\}\
\
\cf2 func\cf0  (s *SmartContract) changeCarOwner(APIstub shim.ChaincodeStubInterface, args []\cf5 string\cf0 ) sc.Response \{\
\
        \cf2 if\cf0  \cf2 len\cf0 (args) != \cf4 2\cf0  \{\
                \cf2 return\cf0  shim.Error(\cf4 "Incorrect number of arguments. Expecting 2"\cf0 )\
        \}\
\
        carAsBytes, _ := APIstub.GetState(args[\cf4 0\cf0 ])\
        car := Car\{\}\
\
        json.Unmarshal(carAsBytes, &car)\
        car.Owner = args[\cf4 1\cf0 ]\
\
        carAsBytes, _ = json.Marshal(car)\
        APIstub.PutState(args[\cf4 0\cf0 ], carAsBytes)\
\
        \cf2 return\cf0  shim.Success(\cf2 nil\cf0 )\
\}\
\
\cf3 // The main function starts the chaincode in container when initializing \cf0 \
\cf2 func\cf0  main() \cb7 \{\cb1 \
\
        \cf3 // Create a new Smart Contract\cf0 \
        err := shim.Start(\cf2 new\cf0 (AML))\
        \cf2 if\cf0  err != \cf2 nil\cf0  \{\
                fmt.Printf(\cf4 "Error starting AML chaincode: %s"\cf0 , err)\
        \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \cb7 \}\cb1 \
\
}